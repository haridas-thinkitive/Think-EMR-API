// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThinkEMR_Care.DataAccess.Data;

#nullable disable

namespace ThinkEMR_Care.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "efe7045f-bdcd-4130-98ae-68f67d05e898",
                            ConcurrencyStamp = "1",
                            Name = "Admin1",
                            NormalizedName = "Admin1"
                        },
                        new
                        {
                            Id = "3acc945e-d6a3-4e5a-9da1-4e0e3f79a746",
                            ConcurrencyStamp = "2",
                            Name = "Admin2",
                            NormalizedName = "Admin2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("collaborators");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.DashboardCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentsCount")
                        .HasColumnType("int");

                    b.Property<int>("EncountersCount")
                        .HasColumnType("int");

                    b.Property<int>("PatientsCount")
                        .HasColumnType("int");

                    b.Property<int>("ProviderGroupCount")
                        .HasColumnType("int");

                    b.Property<int>("ProvidersCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DashboardCounts");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.DashboardData", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("AppointmentCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncounterCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientsCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProvidersCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("GroupId");

                    b.ToTable("DashboardDatas");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Provider.ProviderAcceptedInsurance", b =>
                {
                    b.Property<int>("ProviderAcceptedInsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderAcceptedInsuranceId"));

                    b.Property<string>("ProviderAcceptedInsuranceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderAcceptedInsuranceId");

                    b.ToTable("ProviderAcceptedInsurance");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Provider.ProviderLicensedState", b =>
                {
                    b.Property<int>("ProviderLicensedStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderLicensedStateId"));

                    b.Property<string>("ProviderLicensedStateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderLicensedStateId");

                    b.ToTable("ProviderLicensedState");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Provider.ProviderSpokenLanguage", b =>
                {
                    b.Property<int>("ProviderSpokenLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderSpokenLanguageId"));

                    b.Property<string>("ProviderSpokenLanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderSpokenLanguageId");

                    b.ToTable("ProviderSpokenLanguage");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Provider.ProviderType", b =>
                {
                    b.Property<int>("ProviderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderTypeId"));

                    b.Property<string>("ProviderTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderTypeId");

                    b.ToTable("ProviderType");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.Provider.ProviderWorkLocation", b =>
                {
                    b.Property<int>("ProviderWorkLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderWorkLocationId"));

                    b.Property<string>("ProviderWorkLocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderWorkLocationId");

                    b.ToTable("ProviderWorkLocation");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<bool>("AcceptCashPay")
                        .HasColumnType("bit");

                    b.Property<bool>("AcceptNewPatients")
                        .HasColumnType("bit");

                    b.Property<int>("AgeGroupSeen")
                        .HasColumnType("int");

                    b.Property<string>("Education_WorkExperience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpertiseIn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GroupNPINumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital_Affialation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InsuranceVerification")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OfficeFaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderAcceptedInsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderBio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProviderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderLicensedStateId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ProviderSpokenLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderWorkLocationId")
                        .HasColumnType("int");

                    b.Property<string>("Provider_Employment_Referral_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Sub_Specialities")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TaxonomyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderId");

                    b.HasIndex("ProviderAcceptedInsuranceId");

                    b.HasIndex("ProviderGroupId");

                    b.HasIndex("ProviderLicensedStateId");

                    b.HasIndex("ProviderSpokenLanguageId");

                    b.HasIndex("ProviderTypeId");

                    b.HasIndex("ProviderWorkLocationId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("tbl_Provider");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderDepartment", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentAdminId")
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderGroupId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("ProviderGroupId");

                    b.ToTable("tbl_ProviderDepartment");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", b =>
                {
                    b.Property<int>("ProviderGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderGroupId"));

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderGroupEmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProviderGroupId");

                    b.ToTable("tbl_ProviderGroup");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroupLocation", b =>
                {
                    b.Property<int>("ProviderGroupLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderGroupLocationId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Speciality")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProviderGroupLocationId");

                    b.HasIndex("ProviderGroupId");

                    b.ToTable("tbl_ProviderGroupLocation");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderStaffUser", b =>
                {
                    b.Property<int>("StaffUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffUserId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProviderGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("StaffUserId");

                    b.HasIndex("ProviderGroupId");

                    b.ToTable("tbl_ProviderStaffUser");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"));

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialityId");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.Provider", b =>
                {
                    b.HasOne("ThinkEMR_Care.DataAccess.Models.Provider.ProviderAcceptedInsurance", "ProviderAcceptedInsurance")
                        .WithMany()
                        .HasForeignKey("ProviderAcceptedInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", "ProviderGroup")
                        .WithMany("Providers")
                        .HasForeignKey("ProviderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.Provider.ProviderLicensedState", "ProviderLicensedState")
                        .WithMany()
                        .HasForeignKey("ProviderLicensedStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.Provider.ProviderSpokenLanguage", "ProviderSpokenLanguage")
                        .WithMany()
                        .HasForeignKey("ProviderSpokenLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.Provider.ProviderType", "ProviderType")
                        .WithMany()
                        .HasForeignKey("ProviderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.Provider.ProviderWorkLocation", "ProviderWorkLocation")
                        .WithMany()
                        .HasForeignKey("ProviderWorkLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThinkEMR_Care.DataAccess.Models.ProviderGroup.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderAcceptedInsurance");

                    b.Navigation("ProviderGroup");

                    b.Navigation("ProviderLicensedState");

                    b.Navigation("ProviderSpokenLanguage");

                    b.Navigation("ProviderType");

                    b.Navigation("ProviderWorkLocation");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderDepartment", b =>
                {
                    b.HasOne("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", "providerGroup")
                        .WithMany("ProviderDepartments")
                        .HasForeignKey("ProviderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("providerGroup");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroupLocation", b =>
                {
                    b.HasOne("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", "ProviderGroup")
                        .WithMany("ProviderGroupLocations")
                        .HasForeignKey("ProviderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderGroup");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderStaffUser", b =>
                {
                    b.HasOne("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", "ProviderGroup")
                        .WithMany("ProviderStaffUsers")
                        .HasForeignKey("ProviderGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProviderGroup");
                });

            modelBuilder.Entity("ThinkEMR_Care.DataAccess.Models.ProviderGroup.ProviderGroup", b =>
                {
                    b.Navigation("ProviderDepartments");

                    b.Navigation("ProviderGroupLocations");

                    b.Navigation("ProviderStaffUsers");

                    b.Navigation("Providers");
                });
#pragma warning restore 612, 618
        }
    }
}
